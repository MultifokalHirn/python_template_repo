[project]
name = "python_template_repo"
version = "0.0.0"
description = "A small example projhect"
authors = [
  {name = "Lennard Wolf", email = "7870758+MultifokalHirn@users.noreply.github.com"},
]
readme = "README.md"
license = {file = "LICENSE"}

# requirements
requires-python = ">=3.8.1"
dependencies = [
  "pydantic",
  "ruamel-yaml",
  "termcolor",
  "typing-extensions",
  "structlog", # "types-requests",
  "devtools",
  "structlog",
]

keywords = ["template"]
classifiers = [
    "Topic :: Software Development :: Build Tools",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# [project.scripts]
# app = "python3 -m app"

# linting
[tool.flake8]
exclude = [".tox", ".venv", ".github", ".git", ".pdm-build", "__pypackages__", ".vscode"]
ignore = ["C901", "W503"]
max-complexity = 12
max-line-length = 127
show-source = true
statistics = true

[tool.isort]
atomic = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 127
multi_line_output = 3
use_parentheses = false

[tool.mypy]
# plugins = ["pydantic.mypy"]
# python_version = "3.11"
ignore_missing_imports = true
disallow_any_unimported = false
pretty = true

[tool.coverage.run]
branch = true
omit = [
  "*/__main__.py",
  "*/tests/*",
  "*/docs/*",
  "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
]
fail_under = 99
show_missing = true
skip_covered = false
sort = "Cover"

[tool.commitizen]
version = "0.0.0"
version_files = [
  "src/__version__.py",
  "pyproject.toml:version",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
]

line-length = 127
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.pdm.dev-dependencies]
# pdm add -dG group package
base = [
  "pre-commit",
  "commitizen",
  "coverage",
  "tox",
  "tox-pdm"
]
lint = [
  # "flake8",
  "ruff",
  "mypy",
  "mypy-extensions",
]
lint-fix = [
  # "autopep8",
  # "isort",
]
test = [
  "pytest",
  "pytest-cov",
  "pytest-mypy",
  "pytest-xdist",
  "types-mock",
]
refactoring = [
    "pyupgrade>=3.15.0",
]

[tool.pdm.build]
excludes = ["./**/.git"]
package-dir = "src"
includes = ["src/pdm"]
source-includes = ["tests", "CHANGELOG.md", "LICENSE", "README.md"]

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]

[build-system]
build-backend = "pdm.backend"
requires = ["pdm-backend"]
